{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Photos","props","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","sortedPhotos","setSortedPhotos","openLightbox","useCallback","event","photo","index","useEffect","photos","sort","a","b","direction","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","MediaGallery","state","items","_this","this","serverRequest","axios","get","then","result","data","forEach","p","i","img","Image","onload","width","height","setState","oldState","src","imageURL","item","farm","server","id","secret","length","type","color","className","timeout","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAOA,SAASA,EAAOC,GAAQ,IAAD,EACqBC,mBAAS,GAD9B,mBACZC,EADY,KACEC,EADF,OAEqBF,oBAAS,GAF9B,mBAEZG,EAFY,KAEEC,EAFF,OAGqBJ,mBAAS,IAH9B,mBAGZK,EAHY,KAGEC,EAHF,KAKbC,EAAeC,uBAAY,SAACC,EAAD,GAA2B,EAAlBC,MAAmB,IAAZC,EAAW,EAAXA,MAC7CT,EAAgBS,GAChBP,GAAgB,KACjB,IAEHQ,qBAAU,WAENN,EAAgBP,EAAMc,OAAOC,MAAK,SAACC,EAAEC,GACjC,OAAOD,EAAEJ,MAAQK,EAAEL,MAAQ,GAAK,SAQxC,OACI,6BACI,kBAAC,IAAD,CAASE,OAAQR,EAAcY,UAAW,SAAWC,QAASX,IAC9D,kBAAC,IAAD,KACKJ,EACG,kBAAC,IAAD,CAAOgB,QATD,WAClBjB,EAAgB,GAChBE,GAAgB,KAQA,kBAAC,IAAD,CACIgB,aAAcnB,EACdoB,MAAOtB,EAAMc,OAAOS,KAAI,SAAAC,GAAC,sBAClBA,EADkB,CAErBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIvB,O,IAwDLC,E,YAhDX,WAAY7B,GAAQ,IAAD,8BACf,4CAAMA,KACD8B,MAAQ,CACTC,MAAO,IAHI,E,iFAQf,IAAIC,EAAQC,KACZA,KAAKC,cAAgBC,IAAMC,IAAI,0KACtBC,MAAK,SAASC,GACXA,EAAOC,KAAKzB,OAAOH,MAAM6B,SAAQ,SAACC,EAAGC,GACjC,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WACTJ,EAAEK,MAAQb,KAAKa,MACfL,EAAEM,OAASd,KAAKc,OAChBf,EAAMgB,UAAS,SAAAC,GAAQ,sBAChBA,EADgB,CAEnBlB,MAAM,GAAD,mBAAMkB,EAASlB,OAAf,CAAsBU,UAGnCA,EAAES,IAAMlB,EAAMmB,SAASV,GACvBA,EAAE7B,MAAQ8B,EACVC,EAAIO,IAAMT,EAAES,Y,+BAMvBE,GACL,MAAO,eAAiBA,EAAKC,KAAO,qBAAuBD,EAAKE,OAAS,IAAMF,EAAKG,GAAK,IAAMH,EAAKI,OAAS,W,+BAK7G,OAAOvB,KAAKH,MAAMC,MAAM0B,OAAS,EAC7B,kBAAC1D,EAAD,CAAQe,OAAQmB,KAAKH,MAAMC,QAC1B,kBAAC,IAAD,CACD2B,KAAK,OACLC,MAAM,UACNC,UAAU,SACVb,OAAQ,IACRD,MAAO,IACPe,QAAS,Q,GA7CMC,aCrCPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.afd8d8f5.chunk.js","sourcesContent":["import React, { useState, useCallback, Component, useEffect }  from 'react';\nimport './App.css';\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport axios from 'axios';\nimport Loader from 'react-loader-spinner'\n\nfunction Photos(props) {\n    const [currentImage, setCurrentImage] = useState(0);\n    const [viewerIsOpen, setViewerIsOpen] = useState(false);\n    const [sortedPhotos, setSortedPhotos] = useState([]);\n\n    const openLightbox = useCallback((event, {photo, index}) => {\n        setCurrentImage(index);\n        setViewerIsOpen(true);\n    }, []);\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        setSortedPhotos(props.photos.sort((a,b) => {\n            return a.index > b.index ? 1 : -1;\n        }))\n    });\n\n    const closeLightbox = () => {\n        setCurrentImage(0);\n        setViewerIsOpen(false);\n    };\n    return (\n        <div>\n            <Gallery photos={sortedPhotos} direction={\"column\"}  onClick={openLightbox}/>\n            <ModalGateway>\n                {viewerIsOpen ? (\n                    <Modal onClose={closeLightbox}>\n                        <Carousel\n                            currentIndex={currentImage}\n                            views={props.photos.map(x => ({\n                                ...x,\n                                srcset: x.srcSet,\n                                caption: x.title\n                            }))}\n                        />\n                    </Modal>\n                ) : null}\n            </ModalGateway>\n        </div>\n    );\n}\n\nclass MediaGallery extends Component {\n    // set initial state of elements\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: []\n        }\n    }\n\n    componentDidMount() {\n        var _this = this;\n        this.serverRequest = axios.get('https://api.flickr.com/services/rest/?method=flickr.people.getPublicPhotos&api_key=ca3783111609d69139840916b7a01ad2&format=json&nojsoncallback=1&user_id=186661056@N03')\n                .then(function(result) {\n                    result.data.photos.photo.forEach((p, i) => {\n                        const img = new Image();\n                        img.onload = function(){\n                            p.width = this.width;\n                            p.height = this.height;\n                            _this.setState(oldState => ({\n                                ...oldState,\n                                items: [...oldState.items, p]\n                            }))\n                        };\n                        p.src = _this.imageURL(p);\n                        p.index = i;\n                        img.src = p.src;\n                    });\n                })\n    }\n\n    // assemble image URL\n    imageURL(item) {\n        return 'https://farm' + item.farm + '.staticflickr.com/' + item.server + '/' + item.id + '_' + item.secret + '_b.jpg'\n    }\n\n    // render the app\n    render() {\n        return this.state.items.length > 0 ? (\n            <Photos photos={this.state.items} />\n        ) : (<Loader\n            type=\"Grid\"\n            color=\"#ED553b\"\n            className=\"loader\"\n            height={500}\n            width={500}\n            timeout={0} //3 secs\n        />);\n    }\n}\n\nexport default MediaGallery;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}